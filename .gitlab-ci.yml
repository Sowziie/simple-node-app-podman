stages:
  - build
  - sonar
  - docker
  - scan

variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: ""
  GIT_COMMIT_SHORT: "$CI_COMMIT_SHORT_SHA"
  CI_PROJECT_DIR: "$CI_PROJECT_DIR"  # Assure la disponibilit√© du chemin

  # SonarQube
  SONAR_HOST_URL: "http://3.80.121.146:9000"
  SONAR_PROJECT_KEY: "NodeApp"

  # DockerHub
  DOCKER_USER: "$DOCKER_USER"
  DOCKER_PASS: "$DOCKER_PASS"

###########################
# 1) Install dependencies & test
###########################
build:
  stage: build
  image: node:22
  script:
    - echo "üõ†Ô∏è Installation des d√©pendances..."
    - npm install
    - echo "üß™ Lancement des tests..."
    - npm test || echo "‚ö†Ô∏è Aucun test d√©fini"
  artifacts:
    paths:
      - node_modules/

###########################
# 2) Analyse SonarQube
###########################
sonar:
  stage: sonar
  image:
    name: sonarsource/sonar-scanner-cli:11
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "sonar-cache-${CI_COMMIT_REF_SLUG}"
    paths:
      - .sonar/cache
  script:
    - echo "üîç Analyse SonarQube"
    - >
      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONAR_HOST_URL}
      -Dsonar.login=${SONAR_TOKEN}
      -Dsonar.qualitygate.wait=true
  allow_failure: false

###########################
# 3) Podman Build & Push (CORRIG√â)
###########################
docker:
  stage: docker
  tags:
    - podman
    - node
  script:
    - echo "üìÇ Contenu du r√©pertoire:"
    - ls -la  # Debug: v√©rifie les fichiers pr√©sents
    
    - echo "üîê Connexion √† Docker Hub via Podman"
    - echo "$DOCKER_PASS" | podman login docker.io -u "$DOCKER_USER" --password-stdin

    - echo "üê≥ Build de l'image Node.js"
    - podman build -t docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT -f Dockerfile .
    
    - echo "üì§ Push de l'image versionn√©e"
    - podman push docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT

    - echo "üè∑Ô∏è Tag en latest"
    - podman tag docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT docker.io/$DOCKER_USER/nodeapp:latest

    - echo "üì§ Push du tag latest"
    - podman push docker.io/$DOCKER_USER/nodeapp:latest

###########################
# 4) Trivy Scan avec Podman (CORRIG√â)
###########################
scan:
  stage: scan
  tags:
    - podman
    - node
  script:
    - echo "üîê Connexion √† Docker Hub via Podman"
    - echo "$DOCKER_PASS" | podman login docker.io -u "$DOCKER_USER" --password-stdin
    
    - echo "‚¨áÔ∏è Pull de l'image √† scanner"
    - podman pull docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT
    
    - echo "üîé Scan Trivy de l'image"
    - trivy image --exit-code 1 --severity HIGH,CRITICAL docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT
    
    - echo "üßπ Nettoyage de l'image"
    - podman rmi docker.io/$DOCKER_USER/nodeapp:$GIT_COMMIT_SHORT
  allow_failure: true